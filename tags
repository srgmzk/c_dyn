!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CC	Makefile	/^CC=gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS=-Wall -g$/;"	m
CHANGE_NODE	tree.h	70;"	d
GET_NODE_KEY	tree.h	98;"	d
GET_NODE_OFFSET	tree.h	120;"	d
HAVE_TWINS	tree.h	66;"	d
INIT_HEAD	ll.h	43;"	d
IS_LEAF	tree.h	64;"	d
IS_LEFT	tree.h	78;"	d
IS_NODE	tree.h	68;"	d
IS_PARENT	tree.h	112;"	d
IS_RIGHT	tree.h	75;"	d
LDLIBS	Makefile	/^LDLIBS=$/;"	m
LEFT_TRAV	tree.h	81;"	d
LL_H	ll.h	21;"	d
MAX_LIST_SIZE	ll.h	28;"	d
MAX_PREFIX_SIZE	tree.c	23;"	d	file:
NEXT_FROM_LEFT	tree.h	30;"	d
NEXT_FROM_RIGHT	tree.h	43;"	d
NODE_VAL	tree.h	103;"	d
PRINT_LEAF	tree.h	138;"	d
PRINT_OFFSET	tree.h	131;"	d
PRINT_TNODE_DBG	tree.h	124;"	d
RIGHT_TRAV	tree.h	89;"	d
STACK_IS_NULL	tree.h	115;"	d
TO_LEFT	tree.h	26;"	d
TO_RIGHT	tree.h	28;"	d
TREE_H	tree.h	20;"	d
add_node	ll.h	61;"	d
add_tnode	tree.c	/^int add_tnode(branch_tree *root, branch_tree *new)$/;"	f
branch	tree.h	/^	branch_tree branch;$/;"	m	struct:tree_node
branch_tree	tree.h	/^typedef struct branch_tree$/;"	s
branch_tree	tree.h	/^} branch_tree;$/;"	t	typeref:struct:branch_tree
container_of	ll.h	34;"	d
delete_tnode	tree.c	/^branch_tree *delete_tnode(branch_tree *root, unsigned int key)$/;"	f
depth	tree.h	/^	unsigned int depth;$/;"	m	struct:ptree_struct
destroy_tnode	tree.c	/^void destroy_tnode(branch_tree *node, void *arg)$/;"	f
destroy_tree	tree.c	/^void destroy_tree(branch_tree *root, unsigned depth)$/;"	f
dfl_prefix	tree.h	/^ 	char *dfl_prefix;\/\/ = malloc((MAX_PREFIX_SIZE(depth)\/2) * sizeof(char));$/;"	m	struct:ptree_struct
fill_stack	tree.c	/^static void fill_stack(list_head **head, branch_tree **node )$/;"	f	file:
for_each_entry	ll.h	40;"	d
get_num_nodes	tree.c	/^unsigned get_num_nodes(branch_tree *root)$/;"	f
init_tnode	tree.c	/^void init_tnode(branch_tree *root, void *val)$/;"	f
init_troot	tree.c	/^void init_troot(branch_tree **root, void *val)$/;"	f
insert_node	ll.c	/^int insert_node(list_head *head, list_head *new_node)$/;"	f
left	tree.h	/^	struct branch_tree *left;$/;"	m	struct:branch_tree	typeref:struct:branch_tree::branch_tree
list_entry	ll.h	37;"	d
list_head	ll.h	/^typedef struct list_head$/;"	s
list_head	ll.h	/^} list_head, *list_ptr;$/;"	t	typeref:struct:list_head
list_node	tree.h	/^	ll_node_tree *list_node;$/;"	m	struct:ptree_struct
list_ptr	ll.h	/^} list_head, *list_ptr;$/;"	t	typeref:struct:list_head
ll_int	ll.h	/^	list_head ll_int;$/;"	m	struct:ll_node_A
ll_node_A	ll.h	/^typedef struct ll_node_A$/;"	s
ll_node_A	ll.h	/^} ll_node_A, *ptr_ll_node_A;$/;"	t	typeref:struct:ll_node_A
ll_node_tree	tree.h	/^typedef struct ll_node_tree$/;"	s
ll_node_tree	tree.h	/^} ll_node_tree;$/;"	t	typeref:struct:ll_node_tree
ll_tree	tree.h	/^	list_head ll_tree;$/;"	m	struct:ll_node_tree
main	hash.c	/^int main()$/;"	f
main	main.c	/^int main()$/;"	f
main	strln.c	/^int main()$/;"	f
new_int_node	ll.c	/^ll_node_A *new_int_node(int val)$/;"	f
new_prefix	tree.h	/^ 	char *new_prefix;\/\/ = malloc((MAX_PREFIX_SIZE(depth)\/2) * sizeof(char));$/;"	m	struct:ptree_struct
next	ll.h	/^	struct list_head *next;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
node	tree.h	/^	branch_tree *node; \/\/value of linked tree node (node with branches)$/;"	m	struct:ll_node_tree
offset	tree.h	/^	unsigned int offset;$/;"	m	struct:ll_node_tree
offsetof	ll.h	31;"	d
parent	tree.h	/^	branch_tree *parent;$/;"	m	struct:ptree_struct
phead	tree.h	/^	list_head *phead;$/;"	m	struct:ptree_struct
pop_node_from_ll	tree.c	/^static int pop_node_from_ll(list_head *head, ll_node_tree **ret)$/;"	f	file:
pop_parent_from_ll	tree.c	/^static int pop_parent_from_ll(list_head *head, ll_node_tree **ret)$/;"	f	file:
prev	ll.h	/^	struct list_head *prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
print_int_node	ll.c	/^void print_int_node(list_head *head)$/;"	f
print_tnode	tree.c	/^void print_tnode(branch_tree *curr, void *arg)$/;"	f
print_tree	tree.c	/^void print_tree(branch_tree *root,  unsigned int depth)$/;"	f
ptr_ll_node_A	ll.h	/^} ll_node_A, *ptr_ll_node_A;$/;"	t	typeref:struct:ll_node_A
ptr_tree_node	tree.h	/^} tree_node, *ptr_tree_node;$/;"	t	typeref:struct:tree_node
ptree_struct	tree.h	/^typedef struct ptree_struct$/;"	s
ptree_struct	tree.h	/^} ptree_struct;$/;"	t	typeref:struct:ptree_struct
push_node_to_ll	tree.c	/^static void push_node_to_ll(list_head *head, branch_tree **node, unsigned offset )$/;"	f	file:
remove_first	ll.c	/^int remove_first(list_head *head, ll_node_A *ret)$/;"	f
remove_last	ll.c	/^int remove_last(list_head *head, ll_node_A *ret)$/;"	f
right	tree.h	/^	struct branch_tree *right;$/;"	m	struct:branch_tree	typeref:struct:branch_tree::branch_tree
root	tree.h	/^	branch_tree *root;$/;"	m	struct:ptree_struct
search_tnode	tree.c	/^void search_tnode(branch_tree *root, unsigned key, branch_tree **node, branch_tree **parent)$/;"	f
tree_node	tree.h	/^typedef struct tree_node$/;"	s
tree_node	tree.h	/^} tree_node, *ptr_tree_node;$/;"	t	typeref:struct:tree_node
val	ll.h	/^	int val;$/;"	m	struct:ll_node_A
val	tree.h	/^	int val;$/;"	m	struct:tree_node
walk_tree_inorder	tree.c	/^unsigned walk_tree_inorder(branch_tree *root, $/;"	f
walk_tree_postorder	tree.c	/^unsigned  walk_tree_postorder(branch_tree *root, $/;"	f
walk_tree_preorder	tree.c	/^unsigned int walk_tree_preorder(branch_tree *root, $/;"	f
x_offset	tree.h	/^	unsigned int x_offset;$/;"	m	struct:ptree_struct
