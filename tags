!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/mos/zoo/c_dyn/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20210110.0/
CC	Makefile	/^CC=gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS=-Wall -g -no-pie -ggdb3$/;"	m
GET_NODE_OFFSET	tree.h	/^#define GET_NODE_OFFSET(/;"	d
GET_NODE_VAL	tree.h	/^#define GET_NODE_VAL(/;"	d
HAVE_TWINS	tree.h	/^#define HAVE_TWINS(/;"	d
INIT_HEAD	ll.h	/^#define INIT_HEAD(/;"	d
IS_LEAF	tree.h	/^#define IS_LEAF(/;"	d
IS_LEFT	tree.h	/^#define IS_LEFT(/;"	d
IS_NODE	tree.h	/^#define IS_NODE(/;"	d
IS_PARENT	tree.h	/^#define IS_PARENT(/;"	d
IS_RIGHT	tree.h	/^#define IS_RIGHT(/;"	d
LDLIBS	Makefile	/^LDLIBS=$/;"	m
LEFT_TRAV	tree.h	/^#define LEFT_TRAV(/;"	d
LL_H	ll.h	/^#define LL_H$/;"	d
MAX_LIST_SIZE	ll.h	/^#define MAX_LIST_SIZE /;"	d
MAX_PREFIX_SIZE	tree.c	/^#define MAX_PREFIX_SIZE(/;"	d	file:
NODE_VAL	tree.h	/^#define NODE_VAL(/;"	d
PRINT_ARRAY_TREE	tree.h	/^#define PRINT_ARRAY_TREE(/;"	d
PRINT_IN_STACK	tree.h	/^#define PRINT_IN_STACK(/;"	d
PRINT_LEAF	tree.h	/^#define PRINT_LEAF(/;"	d
PRINT_OFFSET	tree.h	/^#define PRINT_OFFSET(/;"	d
PRINT_OUT_STACK	tree.h	/^#define PRINT_OUT_STACK(/;"	d
RIGHT_TRAV	tree.h	/^#define RIGHT_TRAV(/;"	d
STACK_IS_NULL	tree.h	/^#define STACK_IS_NULL(/;"	d
TARGET	Makefile	/^TARGET: ll.o libll.a tree.o libtree.a main.o main $/;"	t
TO_LEFT	tree.h	/^#define TO_LEFT(/;"	d
TO_RIGHT	tree.h	/^#define TO_RIGHT(/;"	d
TREE_H	tree.h	/^#define TREE_H$/;"	d
add_node	ll.c	/^int add_node(list_head *head, list_head *new_item) $/;"	f	typeref:typename:int
add_node_tree	tree.c	/^void add_node_tree(branch_tree *root, branch_tree *new)$/;"	f	typeref:typename:void
branch	tree.h	/^	branch_tree branch;$/;"	m	struct:tree_node	typeref:typename:branch_tree
branch_tree	tree.h	/^typedef struct branch_tree$/;"	s
branch_tree	tree.h	/^} branch_tree;$/;"	t	typeref:struct:branch_tree
c_dyn	README.md	/^# c_dyn$/;"	c
clean	Makefile	/^clean:$/;"	t
container_of	ll.h	/^#define container_of(/;"	d
fill_stack	tree.c	/^void fill_stack(list_head **head, branch_tree **node )$/;"	f	typeref:typename:void
for_each_entry	ll.h	/^#define for_each_entry(/;"	d
insert_node	ll.c	/^int insert_node(list_head *head, list_head *new_node)$/;"	f	typeref:typename:int
left	tree.h	/^	struct branch_tree *left;$/;"	m	struct:branch_tree	typeref:struct:branch_tree *
libll.a	Makefile	/^libll.a: ll.o$/;"	t
libtree.a	Makefile	/^libtree.a: tree.o$/;"	t
list_entry	ll.h	/^#define list_entry(/;"	d
list_head	ll.h	/^typedef struct list_head$/;"	s
list_head	ll.h	/^} list_head, *list_ptr;$/;"	t	typeref:struct:list_head
list_ptr	ll.h	/^} list_head, *list_ptr;$/;"	t	typeref:struct:list_head *
ll.o	Makefile	/^ll.o: ll.c$/;"	t
ll_int	ll.h	/^	list_head ll_int;$/;"	m	struct:ll_node_A	typeref:typename:list_head
ll_node_A	ll.h	/^typedef struct ll_node_A$/;"	s
ll_node_A	ll.h	/^} ll_node_A, *ptr_ll_node_A;$/;"	t	typeref:struct:ll_node_A
ll_node_tree	tree.h	/^typedef struct ll_node_tree$/;"	s
ll_node_tree	tree.h	/^} ll_node_tree;$/;"	t	typeref:struct:ll_node_tree
ll_tree	tree.h	/^	list_head ll_tree;$/;"	m	struct:ll_node_tree	typeref:typename:list_head
main	Makefile	/^main: main.o$/;"	t
main	hash.c	/^int main()$/;"	f	typeref:typename:int
main	main.c	/^int main()$/;"	f	typeref:typename:int
main.o	Makefile	/^main.o: main.c$/;"	t
new_A_node	ll.c	/^ll_node_A *new_A_node(int val)$/;"	f	typeref:typename:ll_node_A *
next	ll.h	/^	struct list_head *next;$/;"	m	struct:list_head	typeref:struct:list_head *
node	tree.h	/^	branch_tree *node; \/\/value of linked tree node (node with branches)$/;"	m	struct:ll_node_tree	typeref:typename:branch_tree *
offset	tree.h	/^	unsigned int offset;$/;"	m	struct:ll_node_tree	typeref:typename:unsigned int
offsetof	ll.h	/^#define offsetof(/;"	d
pop_node_from_ll	tree.c	/^int pop_node_from_ll(list_head *head, ll_node_tree **ret)$/;"	f	typeref:typename:int
pop_parent_from_ll	tree.c	/^int pop_parent_from_ll(list_head *head, ll_node_tree **ret)$/;"	f	typeref:typename:int
prev	ll.h	/^	struct list_head *prev;$/;"	m	struct:list_head	typeref:struct:list_head *
print_int_node	ll.c	/^void print_int_node(list_head *head)$/;"	f	typeref:typename:void
print_tree	tree.c	/^void print_tree(branch_tree *root, branch_tree **arr, unsigned int depth)$/;"	f	typeref:typename:void
ptr_ll_node_A	ll.h	/^} ll_node_A, *ptr_ll_node_A;$/;"	t	typeref:struct:ll_node_A *
ptr_tree_node	tree.h	/^} tree_node, *ptr_tree_node;$/;"	t	typeref:struct:tree_node *
push_node_to_ll	tree.c	/^void push_node_to_ll(list_head *head, branch_tree **node, unsigned offset )$/;"	f	typeref:typename:void
remove_first	ll.c	/^int remove_first(list_head *head, ll_node_A **ret)$/;"	f	typeref:typename:int
remove_last	ll.c	/^int remove_last(list_head *head, ll_node_A **ret)$/;"	f	typeref:typename:int
right	tree.h	/^	struct branch_tree *right;$/;"	m	struct:branch_tree	typeref:struct:branch_tree *
tree.o	Makefile	/^tree.o: tree.c$/;"	t
tree_node	tree.h	/^typedef struct tree_node$/;"	s
tree_node	tree.h	/^} tree_node, *ptr_tree_node;$/;"	t	typeref:struct:tree_node
val	ll.h	/^	int val;$/;"	m	struct:ll_node_A	typeref:typename:int
val	tree.h	/^	int val;$/;"	m	struct:tree_node	typeref:typename:int
walk_tree_inorder	tree.c	/^void walk_tree_inorder(branch_tree *root, $/;"	f	typeref:typename:void
walk_tree_postorder	tree.c	/^void walk_tree_postorder(branch_tree *root, $/;"	f	typeref:typename:void
walk_tree_preorder	tree.c	/^void walk_tree_preorder(branch_tree **root, $/;"	f	typeref:typename:void
